var assert = require('assert')
var is = require('../lib/is')
var fn = function(){}

describe('integers', function(){

  it('positiveInteger', function(){
    assert.equal(false, is.positiveInteger(fn))
    assert.equal(false, is.positiveInteger(new Date()))
    assert.equal(false, is.positiveInteger(undefined))
    assert.equal(false, is.positiveInteger(NaN))
    assert.equal(false, is.positiveInteger(null))
    assert.equal(false, is.positiveInteger(true))
    assert.equal(false, is.positiveInteger(false))
    assert.equal(false, is.positiveInteger({}))
    assert.equal(false, is.positiveInteger([]))
    assert.equal(false, is.positiveInteger(""))
    assert.equal(false, is.positiveInteger("  "))
    assert.equal(false, is.positiveInteger("asdf"))
    assert.equal(false, is.positiveInteger("1.23"))
    assert.equal(false, is.positiveInteger("-42"))
    assert.equal(false, is.positiveInteger("-42.01"))
    assert.equal(false, is.positiveInteger("-1"))
    assert.equal(false, is.positiveInteger("0"))
    assert.equal(false, is.positiveInteger("666"))
    assert.equal(false, is.positiveInteger(1.23))
    assert.equal(false, is.positiveInteger(-42))
    assert.equal(false, is.positiveInteger(-1))
    assert.equal(false, is.positiveInteger(0))
    assert.equal(true,  is.positiveInteger(666))
  })

  it('posInt', function(){
    assert.equal(false, is.posInt(fn))
    assert.equal(false, is.posInt(new Date()))
    assert.equal(false, is.posInt(undefined))
    assert.equal(false, is.posInt(NaN))
    assert.equal(false, is.posInt(null))
    assert.equal(false, is.posInt(true))
    assert.equal(false, is.posInt(false))
    assert.equal(false, is.posInt({}))
    assert.equal(false, is.posInt([]))
    assert.equal(false, is.posInt(""))
    assert.equal(false, is.posInt("   "))
    assert.equal(false, is.posInt("asdf"))
    assert.equal(false, is.posInt("1.23"))
    assert.equal(false, is.posInt("-42"))
    assert.equal(false, is.posInt("-42.01"))
    assert.equal(false, is.posInt("-1"))
    assert.equal(false, is.posInt("0"))
    assert.equal(false, is.posInt("666"))
    assert.equal(false, is.posInt(1.23))
    assert.equal(false, is.posInt(-42))
    assert.equal(false, is.posInt(-1))
    assert.equal(false, is.posInt(0))
    assert.equal(true,  is.posInt(666))
  })

  it('aPositiveInteger', function(){
    assert.equal(false, is.aPositiveInteger(fn))
    assert.equal(false, is.aPositiveInteger(new Date()))
    assert.equal(false, is.aPositiveInteger(undefined))
    assert.equal(false, is.aPositiveInteger(NaN))
    assert.equal(false, is.aPositiveInteger(null))
    assert.equal(false, is.aPositiveInteger(true))
    assert.equal(false, is.aPositiveInteger(false))
    assert.equal(false, is.aPositiveInteger({}))
    assert.equal(false, is.aPositiveInteger([]))
    assert.equal(false, is.aPositiveInteger(""))
    assert.equal(false, is.aPositiveInteger("    "))
    assert.equal(false, is.aPositiveInteger("asdf"))
    assert.equal(false, is.aPositiveInteger("1.23"))
    assert.equal(false, is.aPositiveInteger("-42"))
    assert.equal(false, is.aPositiveInteger("-42.01"))
    assert.equal(false, is.aPositiveInteger("-1"))
    assert.equal(false, is.aPositiveInteger("0"))
    assert.equal(true,  is.aPositiveInteger("666"))
    assert.equal(false, is.aPositiveInteger(1.23))
    assert.equal(false, is.aPositiveInteger(-42))
    assert.equal(false, is.aPositiveInteger(-1))
    assert.equal(false, is.aPositiveInteger(0))
    assert.equal(true,  is.aPositiveInteger(666))
  })

  it('aPosInt', function(){
    assert.equal(false, is.aPosInt(fn))
    assert.equal(false, is.aPosInt(new Date()))
    assert.equal(false, is.aPosInt(undefined))
    assert.equal(false, is.aPosInt(NaN))
    assert.equal(false, is.aPosInt(null))
    assert.equal(false, is.aPosInt(true))
    assert.equal(false, is.aPosInt(false))
    assert.equal(false, is.aPosInt({}))
    assert.equal(false, is.aPosInt([]))
    assert.equal(false, is.aPosInt(""))
    assert.equal(false, is.aPosInt("    "))
    assert.equal(false, is.aPosInt("asdf"))
    assert.equal(false, is.aPosInt("1.23"))
    assert.equal(false, is.aPosInt("-42"))
    assert.equal(false, is.aPosInt("-42.01"))
    assert.equal(false, is.aPosInt("-1"))
    assert.equal(false, is.aPosInt("0"))
    assert.equal(true,  is.aPosInt("666"))
    assert.equal(false, is.aPosInt(1.23))
    assert.equal(false, is.aPosInt(-42))
    assert.equal(false, is.aPosInt(-1))
    assert.equal(false, is.aPosInt(0))
    assert.equal(true,  is.aPosInt(666))
  })

  it('positiveInteger + arg', function(){
    assert.equal(false, is.positiveInteger(fn, 2))
    assert.equal(false, is.positiveInteger(new Date(), 2))
    assert.equal(false, is.positiveInteger(undefined, 2))
    assert.equal(false, is.positiveInteger(NaN, 2))
    assert.equal(false, is.positiveInteger(null, 2))
    assert.equal(false, is.positiveInteger(true, 2))
    assert.equal(false, is.positiveInteger(false, 2))
    assert.equal(false, is.positiveInteger({}, 2))
    assert.equal(false, is.positiveInteger([], 2))
    assert.equal(false, is.positiveInteger("", 2))
    assert.equal(false, is.positiveInteger("   ", 2))
    assert.equal(false, is.positiveInteger("asdf", 2))
    assert.equal(false, is.positiveInteger("1.23", 2))
    assert.equal(false, is.positiveInteger("-42", 2))
    assert.equal(false, is.positiveInteger("-42.01", 2))
    assert.equal(false, is.positiveInteger("-1", 2))
    assert.equal(false, is.positiveInteger("0", 2))
    assert.equal(false, is.positiveInteger("666", 2))
    assert.equal(false, is.positiveInteger(1.23, 2))
    assert.equal(false, is.positiveInteger(-42, 2))
    assert.equal(false, is.positiveInteger(-1, 2))
    assert.equal(false, is.positiveInteger(0, 2))
    assert.equal(false, is.positiveInteger(1, 2))
    assert.equal(true , is.positiveInteger(666, 2))

    assert.equal(false, is.positiveInteger(fn, -2))
    assert.equal(false, is.positiveInteger(new Date(), -2))
    assert.equal(false, is.positiveInteger(undefined, -2))
    assert.equal(false, is.positiveInteger(NaN, -2))
    assert.equal(false, is.positiveInteger(null, -2))
    assert.equal(false, is.positiveInteger(true, -2))
    assert.equal(false, is.positiveInteger(false, -2))
    assert.equal(false, is.positiveInteger({}, -2))
    assert.equal(false, is.positiveInteger([], -2))
    assert.equal(false, is.positiveInteger("", -2))
    assert.equal(false, is.positiveInteger("   ", -2))
    assert.equal(false, is.positiveInteger("asdf", -2))
    assert.equal(false, is.positiveInteger("1.23", -2))
    assert.equal(false, is.positiveInteger("-42", -2))
    assert.equal(false, is.positiveInteger("-42.01", -2))
    assert.equal(false, is.positiveInteger("-1", -2))
    assert.equal(false, is.positiveInteger("0", -2))
    assert.equal(false, is.positiveInteger("666", -2))
    assert.equal(false, is.positiveInteger(1.23, -2))
    assert.equal(false, is.positiveInteger(-42, -2))
    assert.equal(false, is.positiveInteger(-1, -2))
    assert.equal(false, is.positiveInteger(0, -2))
    assert.equal(true , is.positiveInteger(1, -2))
    assert.equal(true , is.positiveInteger(666, -2))
  })

  it('posInt + arg', function(){
    assert.equal(false, is.posInt(fn, 2))
    assert.equal(false, is.posInt(new Date(), 2))
    assert.equal(false, is.posInt(undefined, 2))
    assert.equal(false, is.posInt(NaN, 2))
    assert.equal(false, is.posInt(null, 2))
    assert.equal(false, is.posInt(true, 2))
    assert.equal(false, is.posInt(false, 2))
    assert.equal(false, is.posInt({}, 2))
    assert.equal(false, is.posInt([], 2))
    assert.equal(false, is.posInt("", 2))
    assert.equal(false, is.posInt("   ", 2))
    assert.equal(false, is.posInt("asdf", 2))
    assert.equal(false, is.posInt("1.23", 2))
    assert.equal(false, is.posInt("-42", 2))
    assert.equal(false, is.posInt("-42.01", 2))
    assert.equal(false, is.posInt("-1", 2))
    assert.equal(false, is.posInt("0", 2))
    assert.equal(false, is.posInt("666", 2))
    assert.equal(false, is.posInt(1.23, 2))
    assert.equal(false, is.posInt(-42, 2))
    assert.equal(false, is.posInt(-1, 2))
    assert.equal(false, is.posInt(0, 2))
    assert.equal(false, is.posInt(1, 2))
    assert.equal(true,  is.posInt(666, 2))

    assert.equal(false, is.posInt(fn, -2))
    assert.equal(false, is.posInt(new Date(), -2))
    assert.equal(false, is.posInt(undefined, -2))
    assert.equal(false, is.posInt(NaN, -2))
    assert.equal(false, is.posInt(null, -2))
    assert.equal(false, is.posInt(true, -2))
    assert.equal(false, is.posInt(false, -2))
    assert.equal(false, is.posInt({}, -2))
    assert.equal(false, is.posInt([], -2))
    assert.equal(false, is.posInt("", -2))
    assert.equal(false, is.posInt("   ", -2))
    assert.equal(false, is.posInt("asdf", -2))
    assert.equal(false, is.posInt("1.23", -2))
    assert.equal(false, is.posInt("-42", -2))
    assert.equal(false, is.posInt("-42.01", -2))
    assert.equal(false, is.posInt("-1", -2))
    assert.equal(false, is.posInt("0", -2))
    assert.equal(false, is.posInt("666", -2))
    assert.equal(false, is.posInt(1.23, -2))
    assert.equal(false, is.posInt(-42, -2))
    assert.equal(false, is.posInt(-1, -2))
    assert.equal(false, is.posInt(0, -2))
    assert.equal(true,  is.posInt(1, -2))
    assert.equal(true,  is.posInt(666, -2))
  })

  it('aPositiveInteger + arg', function(){
    assert.equal(false, is.aPositiveInteger(fn, 2))
    assert.equal(false, is.aPositiveInteger(new Date(), 2))
    assert.equal(false, is.aPositiveInteger(undefined, 2))
    assert.equal(false, is.aPositiveInteger(NaN, 2))
    assert.equal(false, is.aPositiveInteger(null, 2))
    assert.equal(false, is.aPositiveInteger(true, 2))
    assert.equal(false, is.aPositiveInteger(false, 2))
    assert.equal(false, is.aPositiveInteger({}, 2))
    assert.equal(false, is.aPositiveInteger([], 2))
    assert.equal(false, is.aPositiveInteger("", 2))
    assert.equal(false, is.aPositiveInteger("   ", 2))
    assert.equal(false, is.aPositiveInteger("asdf", 2))
    assert.equal(false, is.aPositiveInteger("1.23", 2))
    assert.equal(false, is.aPositiveInteger("-42", 2))
    assert.equal(false, is.aPositiveInteger("-42.01", 2))
    assert.equal(false, is.aPositiveInteger("-1", 2))
    assert.equal(false, is.aPositiveInteger("0", 2))
    assert.equal(true , is.aPositiveInteger("666", 2))
    assert.equal(false, is.aPositiveInteger(1.23, 2))
    assert.equal(false, is.aPositiveInteger(-42, 2))
    assert.equal(false, is.aPositiveInteger(-1, 2))
    assert.equal(false, is.aPositiveInteger(0, 2))
    assert.equal(false, is.aPositiveInteger(1, 2))
    assert.equal(true , is.aPositiveInteger(666, 2))

    assert.equal(false, is.aPositiveInteger(fn, -2))
    assert.equal(false, is.aPositiveInteger(new Date(), -2))
    assert.equal(false, is.aPositiveInteger(undefined, -2))
    assert.equal(false, is.aPositiveInteger(NaN, -2))
    assert.equal(false, is.aPositiveInteger(null, -2))
    assert.equal(false, is.aPositiveInteger(true, -2))
    assert.equal(false, is.aPositiveInteger(false, -2))
    assert.equal(false, is.aPositiveInteger({}, -2))
    assert.equal(false, is.aPositiveInteger([], -2))
    assert.equal(false, is.aPositiveInteger("", -2))
    assert.equal(false, is.aPositiveInteger("   ", -2))
    assert.equal(false, is.aPositiveInteger("asdf", -2))
    assert.equal(false, is.aPositiveInteger("1.23", -2))
    assert.equal(false, is.aPositiveInteger("-42", -2))
    assert.equal(false, is.aPositiveInteger("-42.01", -2))
    assert.equal(false, is.aPositiveInteger("-1", -2))
    assert.equal(false, is.aPositiveInteger("0", -2))
    assert.equal(true , is.aPositiveInteger("666", -2))
    assert.equal(false, is.aPositiveInteger(1.23, -2))
    assert.equal(false, is.aPositiveInteger(-42, -2))
    assert.equal(false, is.aPositiveInteger(-1, -2))
    assert.equal(false, is.aPositiveInteger(0, -2))
    assert.equal(true , is.aPositiveInteger(1, -2))
    assert.equal(true , is.aPositiveInteger(666, -2))
  })

  it('aPosInt + arg', function(){
    assert.equal(false, is.aPosInt(fn, 2))
    assert.equal(false, is.aPosInt(new Date(), 2))
    assert.equal(false, is.aPosInt(undefined, 2))
    assert.equal(false, is.aPosInt(NaN, 2))
    assert.equal(false, is.aPosInt(null, 2))
    assert.equal(false, is.aPosInt(true, 2))
    assert.equal(false, is.aPosInt(false, 2))
    assert.equal(false, is.aPosInt({}, 2))
    assert.equal(false, is.aPosInt([], 2))
    assert.equal(false, is.aPosInt("", 2))
    assert.equal(false, is.aPosInt("   ", 2))
    assert.equal(false, is.aPosInt("asdf", 2))
    assert.equal(false, is.aPosInt("1.23", 2))
    assert.equal(false, is.aPosInt("-42", 2))
    assert.equal(false, is.aPosInt("-42.01", 2))
    assert.equal(false, is.aPosInt("-1", 2))
    assert.equal(false, is.aPosInt("0", 2))
    assert.equal(true , is.aPosInt("666", 2))
    assert.equal(false, is.aPosInt(1.23, 2))
    assert.equal(false, is.aPosInt(-42, 2))
    assert.equal(false, is.aPosInt(-1, 2))
    assert.equal(false, is.aPosInt(0, 2))
    assert.equal(false, is.aPosInt(1, 2))
    assert.equal(true , is.aPosInt(666, 2))

    assert.equal(false, is.aPosInt(fn, -2))
    assert.equal(false, is.aPosInt(new Date(), -2))
    assert.equal(false, is.aPosInt(undefined, -2))
    assert.equal(false, is.aPosInt(NaN, -2))
    assert.equal(false, is.aPosInt(null, -2))
    assert.equal(false, is.aPosInt(true, -2))
    assert.equal(false, is.aPosInt(false, -2))
    assert.equal(false, is.aPosInt({}, -2))
    assert.equal(false, is.aPosInt([], -2))
    assert.equal(false, is.aPosInt("", -2))
    assert.equal(false, is.aPosInt("   ", -2))
    assert.equal(false, is.aPosInt("asdf", -2))
    assert.equal(false, is.aPosInt("1.23", -2))
    assert.equal(false, is.aPosInt("-42", -2))
    assert.equal(false, is.aPosInt("-42.01", -2))
    assert.equal(false, is.aPosInt("-1", -2))
    assert.equal(false, is.aPosInt("0", -2))
    assert.equal(true , is.aPosInt("666", -2))
    assert.equal(false, is.aPosInt(1.23, -2))
    assert.equal(false, is.aPosInt(-42, -2))
    assert.equal(false, is.aPosInt(-1, -2))
    assert.equal(false, is.aPosInt(0, -2))
    assert.equal(true , is.aPosInt(1, -2))
    assert.equal(true , is.aPosInt(666, -2))
  })

})
