var assert = require('assert')
var is = require('../lib/is')
var fn = function(){}

describe('numbers', function(){

  it('number', function(){
    assert.equal(false, is.number(fn))
    assert.equal(false, is.number(new Date()))
    assert.equal(false, is.number(undefined))
    assert.equal(true , is.number(NaN))
    assert.equal(false, is.number(null))
    assert.equal(false, is.number(true))
    assert.equal(false, is.number(false))
    assert.equal(false, is.number({}))
    assert.equal(false, is.number([]))
    assert.equal(false, is.number(""))
    assert.equal(false, is.number("   "))
    assert.equal(false, is.number("asdf"))
    assert.equal(false, is.number("1.23"))
    assert.equal(false, is.number("-42"))
    assert.equal(false, is.number("-42.01"))
    assert.equal(false, is.number("-1"))
    assert.equal(false, is.number("0"))
    assert.equal(false, is.number("666"))
    assert.equal(true , is.number(1.23))
    assert.equal(true , is.number(-42))
    assert.equal(true , is.number(-1))
    assert.equal(true , is.number(0))
    assert.equal(true , is.number(666))
  })

  it('aNumber', function(){
    assert.equal(false, is.aNumber(fn))
    assert.equal(false, is.aNumber(new Date()))
    assert.equal(false, is.aNumber(undefined))
    assert.equal(true , is.aNumber(NaN))
    assert.equal(false, is.aNumber(null))
    assert.equal(false, is.aNumber(true))
    assert.equal(false, is.aNumber(false))
    assert.equal(false, is.aNumber({}))
    assert.equal(false, is.aNumber([]))
    assert.equal(false, is.aNumber(""))
    assert.equal(false, is.aNumber("   "))
    assert.equal(false, is.aNumber("asdf"))
    assert.equal(true , is.aNumber("1.23"))
    assert.equal(true , is.aNumber("-42"))
    assert.equal(true , is.aNumber("-42.01"))
    assert.equal(true , is.aNumber("-1"))
    assert.equal(true , is.aNumber("0"))
    assert.equal(true , is.aNumber("666"))
    assert.equal(true , is.aNumber(1.23))
    assert.equal(true , is.aNumber(-42))
    assert.equal(true , is.aNumber(-1))
    assert.equal(true , is.aNumber(0))
    assert.equal(true , is.aNumber(666))
  })

  it('zero', function(){
    assert.equal(false, is.zero(fn))
    assert.equal(false, is.zero(new Date()))
    assert.equal(false, is.zero(undefined))
    assert.equal(false, is.zero(NaN))
    assert.equal(false, is.zero(null))
    assert.equal(false, is.zero(true))
    assert.equal(false, is.zero(false))
    assert.equal(false, is.zero({}))
    assert.equal(false, is.zero([]))
    assert.equal(false, is.zero(""))
    assert.equal(false, is.zero(" 	"))
    assert.equal(false, is.zero("asdf"))
    assert.equal(false, is.zero("1.23"))
    assert.equal(false, is.zero("-42"))
    assert.equal(false, is.zero("-42.01"))
    assert.equal(false, is.zero("-1"))
    assert.equal(false, is.zero("0"))
    assert.equal(false, is.zero("666"))
    assert.equal(false, is.zero(1.23))
    assert.equal(false, is.zero(-42))
    assert.equal(false, is.zero(-1))
    assert.equal(true , is.zero(0))
    assert.equal(false, is.zero(666))
  })

  it('aZero', function(){
    assert.equal(false, is.aZero(fn))
    assert.equal(false, is.aZero(new Date()))
    assert.equal(false, is.aZero(undefined))
    assert.equal(false, is.aZero(NaN))
    assert.equal(false, is.aZero(null))
    assert.equal(false, is.aZero(true))
    assert.equal(false, is.aZero(false))
    assert.equal(false, is.aZero({}))
    assert.equal(false, is.aZero([]))
    assert.equal(false, is.aZero(""))
    assert.equal(false, is.aZero("   "))
    assert.equal(false, is.aZero("asdf"))
    assert.equal(false, is.aZero("1.23"))
    assert.equal(false, is.aZero("-42"))
    assert.equal(false, is.aZero("-42.01"))
    assert.equal(false, is.aZero("-1"))
    assert.equal(true , is.aZero("0"))
    assert.equal(false, is.aZero("666"))
    assert.equal(false, is.aZero(1.23))
    assert.equal(false, is.aZero(-42))
    assert.equal(false, is.aZero(-1))
    assert.equal(true , is.aZero(0))
    assert.equal(false, is.aZero(666))
  })

})
